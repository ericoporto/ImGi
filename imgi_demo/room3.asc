// room script file
bool can_go_next_room;
ImGi_Style* my_style;
bool changed;
int change_count;

struct ColorEdit {
  String name;
  ImGi_Int* r;
  ImGi_Int* g;
  ImGi_Int* b;
};
ColorEdit colors[eImGi_Col_MAX];

int ToAgsColor(int r, int g, int b) {
  r = r >> 3;  
  g = g >> 2;
  b = b >> 3;
  
  r = r << 11;
  g = g << 5;
  
  int c = r+g+b;
  if(c < 32)
    c += 65536;
  return c;
}

int AgsColorToRed(int c) {
  int r;
  r = (c & 63488) >> 11; // 63488 = binary 11111-000000-00000
  r = (r << 3) + (r >> 2);
  return r;
}

int AgsColorToGreen(int c) {
  int g;
  g = (c & 2016) >> 5;   //  2016 = binary 00000-111111-00000
  g = (g << 2) + (g >> 4);
  return g;
}

int AgsColorToBlue(int c) {
  int b;
  b = (c & 31);          //    31 = binary 00000-000000-11111
  b = (b << 3) + (b >> 2);
  return b;
}

void update_style()
{
  for(int i=0; i<eImGi_Col_MAX; i++)
  {
    my_style.colors[i] = ToAgsColor(colors[i].r.value, colors[i].g.value, colors[i].b.value);
  }
  ImGi.Style = my_style;
}

function room_RepExec()
{
  changed = false;
  ImGi.Begin(); 
  
  // I am adding notitle because I don't want to allow dragging the window
  if(ImGi.BeginWindow("Style Color Editor", 32, 32, 540, 180, eImGi_Opt_AlignCenter | 
                                                           eImGi_Opt_NoClose |
                                                           eImGi_Opt_NoResize |
                                                           eImGi_Opt_AutoSize ))
  {
    int rows[];
        
    rows = new int[2];
    rows[0] = 270;
    rows[1] = 270;
    ImGi.LayoutRow(2, rows);
    
    if(change_count <= 40) ImGi.Label("Play  around  with  colors..." );
    else ImGi.Label("Click  to  go  to  next  room..." );
        
    if(ImGi.Button("Click Me !?") && change_count > 40) {
      player.ChangeRoom(4, 242, 151, eDirectionDown);
    }
    
    rows = new int[8];
    rows[0] = 90;
    rows[1] = 60;
    rows[2] = 60;
    rows[3] = 60;
    
    rows[4] = 90;
    rows[5] = 60;
    rows[6] = 60;
    rows[7] = 60;
    ImGi.LayoutRow(8, rows);    
    
    for(int i=0; i<eImGi_Col_MAX; i++)
    {
      ImGi.Label(colors[i].name);
      changed |= ImGi.SliderI(colors[i].name.Append("_Red"), colors[i].r, 0, 255, 1, "%d");
      changed |= ImGi.SliderI(colors[i].name.Append("_Green"), colors[i].g, 0, 255, 1, "%d");
      changed |= ImGi.SliderI(colors[i].name.Append("_Blue"), colors[i].b, 0, 255, 1, "%d");
      
      i++; 
      if(i>eImGi_Col_MAX) break;
      
      ImGi.Label(colors[i].name);
      changed |= ImGi.SliderI(colors[i].name.Append("_Red"), colors[i].r, 0, 255, 1, "%d");
      changed |= ImGi.SliderI(colors[i].name.Append("_Green"), colors[i].g, 0, 255, 1, "%d");
      changed |= ImGi.SliderI(colors[i].name.Append("_Blue"), colors[i].b, 0, 255, 1, "%d");
    }

    ImGi.EndWindow();
  }
  
  ImGi.End();
  
  if(changed) 
  {
    update_style();
    change_count++;
  }
}

function hGlowingOrb_AnyClick()
{

}

function room_Load()
{
  my_style = ImGi_Style.Create();
  for(int i=0; i<eImGi_Col_MAX; i++)
  {
    colors[i].r = new ImGi_Int;
    colors[i].g = new ImGi_Int;
    colors[i].b = new ImGi_Int;
    colors[i].r.value = AgsColorToRed(my_style.colors[i]);
    colors[i].g.value = AgsColorToGreen(my_style.colors[i]);
    colors[i].b.value = AgsColorToBlue(my_style.colors[i]);
  }
  colors[eImGi_Col_Text].name = "Text";
  colors[eImGi_Col_Border].name = "Border";
  colors[eImGi_Col_WindowBG].name = "WindowBG";
  colors[eImGi_Col_TitleBG].name = "TitleBG";
  colors[eImGi_Col_TitleText].name = "TitleText";
  colors[eImGi_Col_PanelBG].name = "PanelBG";
  colors[eImGi_Col_Button].name = "Button";
  colors[eImGi_Col_ButtonHover].name = "ButtonHover";
  colors[eImGi_Col_ButtonFocus].name = "ButtonFocus";
  colors[eImGi_Col_Base].name = "Base";
  colors[eImGi_Col_BaseHover].name = "BaseHover";
  colors[eImGi_Col_BaseFocus].name = "BaseFocus";
  colors[eImGi_Col_ScrollBase].name = "ScrollBase";
  colors[eImGi_Col_ScrollThumb].name = "ScrollThumb";
}
